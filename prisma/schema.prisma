generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Article {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  quick_look        String     @default("") @db.Text
  description       String     @default("") @db.Text
  content           String     @default("")
  word_count        Int        @default(0) @db.Integer
  article_metadata  ArticleMetadata?

  @@index([id], map: "article_id_idx")
}

model ArticleMetadata {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title             String     @default("") @db.Text
  target_word_count Int        @default(0) @db.Integer
  semrush_score     Float      @default(0.0) @db.Real
  author            User?      @relation("Author", fields: [author_id], references: [id])
  author_id         String?    @db.Uuid
  category          Category?  @relation(fields: [category_id], references: [id])
  category_id       String?    @db.Uuid
  status            Status?    @relation(fields: [status_id], references: [id])
  status_id         String?    @db.Uuid
  main_keyword      Keyword?   @relation("MainKeyword", fields: [main_keyword_id], references: [id])
  main_keyword_id   String?    @db.Uuid
  keywords          Keyword[]  @relation("ArticleKeywords")
  article_id        String     @unique @db.Uuid
  article           Article    @relation(fields: [article_id], references: [id])
  time_data         TimeData   @relation(fields: [time_data_id], references: [id])
  time_data_id      String     @db.Uuid
  activity_data     ActivityData @relation(fields: [activity_data_id], references: [id])
  activity_data_id  String     @db.Uuid
  website           Website?   @relation(fields: [website_id], references: [id])
  website_id        String?    @db.Uuid

  @@index([author_id], map: "article_metadata_author_id_idx")
  @@index([category_id], map: "article_metadata_category_id_idx")
  @@index([status_id], map: "article_metadata_status_id_idx")
  @@index([main_keyword_id], map: "article_metadata_main_keyword_id_idx")
  @@index([time_data_id], map: "article_metadata_time_data_id_idx")
  @@index([activity_data_id], map: "article_metadata_activity_data_id_idx")
}

model Keyword {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  keyword           String     @unique @default("") @db.Text
  evergreen         Boolean    @default(false)
  volume            Int        @default(0) @db.Integer
  keyword_density   Int        @default(0) @db.Integer
  country           Country?   @relation(fields: [country_id], references: [id])
  country_id        String?    @db.Uuid
  article_metadata_keywords ArticleMetadata[] @relation("ArticleKeywords")
  article_metadata_main_keyword ArticleMetadata[] @relation("MainKeyword")
  time_data         TimeData   @relation(fields: [time_data_id], references: [id])
  time_data_id      String     @db.Uuid
  activity_data     ActivityData @relation(fields: [activity_data_id], references: [id])
  activity_data_id  String     @db.Uuid

  @@index([id], map: "keyword_id_idx")
  @@index([time_data_id], map: "keyword_time_data_id_idx")
  @@index([activity_data_id], map: "keyword_activity_data_id_idx")
}

model Category {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String     @unique @default("") @db.Text
  article_metadata  ArticleMetadata[]
}

model Status {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String     @unique @default("") @db.Text
  timestamp         DateTime   @default(now()) @db.Timestamptz
  article_metadata  ArticleMetadata[]
}

model Role {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String     @unique @default("") @db.Text
  user              User[]
}

model User {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email             String     @unique @default("") @db.Text
  name              String     @default("") @db.Text
  last_name         String     @default("") @db.Text
  author_name       String     @default("") @db.Text
  role              Role?      @relation(fields: [role_id], references: [id])
  role_id           String?    @db.Uuid
  article_metadata_author ArticleMetadata[] @relation("Author")
  activity_data_modifier ActivityData[] @relation("Modifier")
  activity_data_creator  ActivityData[] @relation("Creator")
  activity_data_deleter  ActivityData[] @relation("Deleter")
  last_active_at    DateTime?  @default(now()) @db.Timestamptz

  @@index([role_id], map: "user_role_id_idx")
}

model TimeData {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date_created      DateTime   @default(now()) @db.Timestamptz
  date_updated      DateTime   @updatedAt @default(now()) @db.Timestamptz
  date_deleted      DateTime?  @db.Timestamptz
  article_metadata  ArticleMetadata[]
  keyword           Keyword[]

  @@index([id], map: "time_data_id_idx")
}

model ActivityData {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  last_modified_by  User       @relation("Modifier", fields: [last_modified_by_id], references: [id])
  last_modified_by_id String   @db.Uuid
  created_by        User       @relation("Creator", fields: [created_by_id], references: [id])
  created_by_id     String     @db.Uuid
  deleted_by        User?      @relation("Deleter", fields: [deleted_by_id], references: [id])
  deleted_by_id     String?    @db.Uuid
  article_metadata  ArticleMetadata[]
  keyword           Keyword[]

  @@index([last_modified_by_id], map: "activity_data_last_modified_by_id_idx")
  @@index([created_by_id], map: "activity_data_created_by_id_idx")
  @@index([deleted_by_id], map: "activity_data_deleted_by_id_idx")
}

model Country {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String     @unique @default("") @db.Text
  keyword           Keyword[]
}

model Website {
  id                String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name              String     @unique @default("") @db.Text
  url               String     @default("") @db.Text
  article_metadata  ArticleMetadata[]
}
